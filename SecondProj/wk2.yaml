#!/bin/python3

#To print a string
#Put everything that will be printed in double quotation marks, since it would be string
print{"Strings and things:"}
#To print using single quotes
print{'Hello world'}
#Print multiline; you have to put it in triple quotes
print{"""Hello, this is
a first multiline code!"""}
#it is recommended to use gedit but unfortunately i was unable to get it installed on my machine.
#I deviced this method and follow the following steps to get it done on kali
#I created the week2 folder, by running "mkdir week2"
#I created a file with nano command and wrote the the code to print it " nano python101.py"
#I closed the file by running "ctrl + x", y, and "Enter"
#I ran "chmod +x python101.py" to make the file executable
#I ran "python3 pyhton101.py" to print what is on the file
#Unfortunately, i got missing parenthesis error on the file, because i was supposed to use
#parenthesis and not inverted brackets. So i corrected it by following the steps from nano
#it worked

#Do concatenation inside of a print
print("This is a "+" Jide's string")

#To entirely print a new line
print('\n') new line

#Math: You can do a lot of Math on python without calling a "math module"
Print("Math time:")
#add
Print(50 + 50)
#subtract
Print(50-20)
#multiply
Print(50 * 50)
#divide; it could give a number with decimal if it has left overs
Print(50 / 50)
#PEMDAS
Print(50 + 50 - 50 * 50 / 50)
#exponent
Print(50 ** 2)
#modula; takes the remainder after division, gives 0 here
Print(50 % 2)
#number without leftovers; after you divide, it will not be float or gives a number with decimal
Print(50 // 6)


print("\n") #new line
#Variables and Methods
print("Variables and Methods:")
#Declare a variable called quote and have a string in it
quote = "All is fair in love and war"
#print the length of quote- how many characters make up quote
print(len(quote))
#Turn the quote to all uper case
print(quote.upper())
#Print it a lower
print(quote.lower())
#Print it out in title form
print(quote.title())

#Output
Variables and Methods:
27
ALL IS FAIR IN LOVE AND WAR
all is fair in love and war
All Is Fair In Love And War

print("\n") #new line
#Another variable execution
#set your bio as variable.
#3 variables
name = "Jide"
age = 37 #int or int(37)
gpa = 4.0 #float or float(4.0)
#Print
print(int(age))
print(int(29.9)) #does not round

#putting a string in print. because age is an integer and not a string, we will need to convert age to string to
#enable an alignment with others
print("My name is " + " and I am " + str(age) + " years old.")

#To add one more year to my age
print("\n") #new line
# The += means we are adding something into what is already there.
age += 1
print(age)

#Or do it in terms of variable to add
birthday = 1
age += birthday
print(age)

print("\n") #new line
#Functions
#Best for when we are trying to do something repeatedly: execute it repeatedly.
#tab, spacing and syntax are very important to executing this. tabs for indentation
#right spacing and appropriate syntax
#you have to use def in function
#you have to use colon too
print("Functions:")
def who__am__i():
#tab next
        name = "Jide" #declare a variable
        age = 37 #declare another variable
        print("My name is " + " and I am " + str(age) + " years old.") #print out something
#call the function now
#everything in the function will get executed
#it will print out whatever is defined inside the function and nothing else
#prints out what resides in the function alone
who__am__i()
#got a syntacx error when i first ran this, because i did not put double underscore in the function call
#that i had (who am i)

#Output error message
┌──(root㉿kali)-[~/week2]
└─# nano python101.py   
                                                                             
┌──(root㉿kali)-[~/week2]
└─# python3 python101.py
  File "/root/week2/python101.py", line 59
    def who am i():
            ^^
SyntaxError: invalid syntax
                                                                             
┌──(root㉿kali)-[~/week2]
└─# 
#Output another error message for not defining the function appropriately. 
# it should be def who__am__i():
┌──(root㉿kali)-[~/week2]
└─# python3 python101.py
  File "/root/week2/python101.py", line 59
    def who am i():
            ^^
SyntaxError: invalid syntax
                                                                             
┌──(root㉿kali)-[~/week2]
└─# 
#The output: Expected output
Functions:
My name is  and I am 37 years old.
                                                                             
┌──(root㉿kali)-[~/week2]
└─# 

#adding parameters
#calling parameters
#define a function called add one hundred and call the parameter "num"
def add__one__hundred(num):
#print parameter num + 100. have a number and add 100 to it
        print(num + 100)
#call the function. you are adding 100 to another 100 to give 200
add__one__hundred(100)

#Output
Functions:
My name is  and I am 37 years old.
200
                                                                             
┌──(root㉿kali)-[~/week2]
└─# 
#add multiple parameters
def add(x,y):
        print(x + y)

add(7,7)
add(200,500)

#return. return values, instead of using print. return values and store it for later.
print("\n")
print("Return:")
def multiply(x,y):
        return x * y

#print it. execute it
print(multiply(7,7))

#square root
def square_root(x):
#exponent of 1/2 will give the square root
        return x ** .5
#print it out
print(square_root(36))

#Boolean expressions( True or False): True or False in capital letters
print("\n")
print("Boolean Expressions:")
bool1 = True #set it to true
bool2 = 3*3 == 9 # this is set to true too, since 3 x 3 will give you 9.
# just one equal gives you variable, but double equal means equals
bool3 = False
bool4 = 3*3 != 9 # this is False, since 3 x 3 will give you 9
print(bool1,bool2,bool3,bool4)
print(type(bool1))

bool5 = "True"
print(type(bool5)) # gives a string

#Memorize the truth table
#https://stackoverflow.com/questions/4445948/understanding-logic-in-python-exercise-27-of-learn-python-the-hard-way
#Relational and Boolean Operators
greater_than = 7 > 5
less_than = 5 < 7
greater_than_equal_to = 7 >= 7
less_than_equal_to = 7 <= 7

print(greater_than,less_than,greater_than_equal_to,less_than_equal_to)
#All these should give you true.

#Testing True and False statements
#when you have "and" both statements must be true for it to be True.if one is false, then the test must be False
#if both statement is false, then it is False.
# if the operator is "or", if both are true, it is True and if both are false, it is False.
#if it is true or false for "or", it is still True.
test_and = (7 > 5) and (8 < 7)
test_or = (7 > 5) or (5 < 7)
test_not = not True

print(test_and) # this should give False, since one of them is false.

#Conditional statements
print("Conditional statements:")
print("\n")
def soda(money):
# wants to buy a soda that costs $2
#so if you have $2
        if money >= 2:
                return "You have got yourself a soda!"
        else:
                return "No, you can't get a soda!"
#print soda if you have got $3
print(soda(3))
#print soda if you have got $1
print(soda(1))

#Output
Conditional statements:


You have got yourself a soda!
No, you can't get a soda!
                                                                             
┌──(root㉿kali)-[~/week2]
└─# 
# a little more complicated
# military age and iq- you have to have above 150 in iq test for you to join and above 18
def military(age,iq_test):
#You are of age and you passed the iq_test
        if (age >= 18) and (iq_test >= 150):
                return "Congratulations! You are qualified!"
#You are of age, but you bungled the iq_test
        elif (age >= 18) and (iq_test < 150):
                return "You are of age, but you are not qualified with the test"
#You are not of age, but you did very well in the test
        elif (age < 18) and (iq_test > 150):
                return "You are on the right track, come back when you are of age"
#You are not of age and you did not do very well in the test
        elif (age < 18) and (iq_test < 150):
                return "Too bad!"

#print statement
print(military(20,150))
print(military(20,140))
print(military(17,160))
print(military(17,140))

#Output
Congratulations! You are qualified!
You are of age, but you are not qualified with the test
You are on the right track, come back when you are of age
Too bad!
                                                                             
┌──(root㉿kali)-[~/week2]



