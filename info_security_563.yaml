#Ojectives
#Main computing assets and security
#Main security goals known as CIA triad
#What are the computing assets to be protected?
1. Hardware
2. Software
3. Data
Hardware: Includes Computer, Devices (disk drives, memory, printer), Network gear
Software: Includes OS, Utilities (antivirus), Commercial applications (word processing, photo editing) and individual applications.
Data: Documents, Photos, music videos, email, class projects.

#Security Goals- CIA (Confidentiality, Integrity and Availability)
Confidentiality: It is the avoidance of unauthorized disclosure of info. It involves the PROTECTION OF DATA, providing ACCESS to those who are allowed to see it
and disallowing others from leaning anything about its content.
Tools of confidentialy: i.e tools that are used to ensure confidentiality
1. Encryption
2. Authentication
3. Access control and support
Encryption: it is the transformation of info using a secret (an encryption key), so that the TRANSFORMED INFO can only be read using
another key (a decryption key). In some cases the decryption key can be the same as encryption key. i.e the encryption key will
TRANSFORM the info into something that cannot be read or deciphered by anybody except when the decryption key is used. can only see ciphertext

Sender (encrypt it with a key)..........> ciphertext(unreadable by attackers)..............>Receiver(decrypt to a plain text)
Authentication: used to determine the identity or role that a user has. The DETERMINATION can be done in a different ways BUT there could be comb
ination of ways. The different ways include-
- something the person has (e.g a smart card or radio key fob storing keys)
- something the person knows (password)
- something the person is e.g fingerprint of a human
Access control: rules and policies that LIMIT access to confidential info for people and/or systems with a "need to know"
Need to know can be determined by:
- Identity: e.g a person's NAME or COMPUTER SERIAL NUMBER
- Role: e.g a person's role e.g a MANAGER or SECURITY ENGINEER

Authorization: It is the DETERMINATION if a person or system is allowed access to resources, based on an access control policy.
Physical security: It is the ESTABLISHMENT of physical barriers to LIMIT access to PROTECTED RESOURCES. e.g use of sound dampening materials
putting computers in windowless rooms, locks on cabinets and doors, construction of buildings or rooms with walls incorporating copper
meshes.

Integrity: It means having info not be altered in unauthorized way.
Integrity Tools Include:
1. Backups
2. Checksums
3. Data correcting codes
Backups: Periodic archiving of data
Checksums: the computation of a function that MAPS the contents of a file to a NUMERICAL VALUE. It is designed in a way that a SMALL CHANGE
in the INPUT FILE( e.g flipping a single bit) is highly likely to result in a DIFFERENT OUTPUT VALUE.
Data correcting codes: methods of storing data in such a way that small changes can be easily detected and automatically corrected. e.g AWS Config

Availability: It means that info is ACCESSIBLE and MODIFIABLE in a timely fashion by those authorized to do so.
Availability tools include:
1. Physical protections
2. Computational redundancies
Physical protections: infrastructure meant to keep info available even in the event of physical challenges
Computational redundancies: computers and storage devices that serve as backups or disaster recovery in the case of failures
Other Security Concepts Triple A- A.A.A
- Authenticity
- Anonymity
- Assurance
Assurance: it refers to how TRUST is PROVIDED and MANAGED in computer systems.
Trust managements depends on: 
Policies
Permissions
Protections
Policies: it specifies the behavioural expectations that people or systems have for themselves and others. e.g the designer of an online
music system can specify the way users can access and copy songs
Permissions: it describes the behaviors that are allowed by the AGENTS that interact with a person or system. e.g an online music store
can provide limited access and copying to people that have purchased certain songs
Protections: mechanisms put in place to ensure permissions and policies e.g an online music store providing protections to prevent people
from unauthorized access and copying of its songs.
Authenticity: is the ABILITY to DETERMINE that statements, policies, and permissions issued by persons or systems are GENUINE
Authenticity Tools:
- Digital signatures e.g on atm card or cards.
Anonymity: that certain RECORD S or TRANSACTIONS not to be attributable to any individual.
Anonymity Tools:
1. Aggregation
2. Mixing
3. Proxies
4. Pseudonyms
Aggregation: Combining of data from many individuals so that disclosed sums or averages CANNOT be tied to any individual
Mixing: The intertwining of transactions, info, or communications in a way that cannot be traced to any individual
Proxies: Trusted agents that are willing to engage in actions for an individual in such a way that it cannot be traced back to that person
Pseudonyms: Fictional identities that can fill in for real identities in communications and transactions (trusted identity) e.g user id

2nd Week
#Objectives
Vulnerability, threat, attack and control
Types of threats and attacks
Ten security principles
Access controls and how to implement access control
Vulnerability: It is a WEAKNESS that could be EXPLOITED to cause HARM.
Threat: A SET OF CIRCUMSTANCES that has the POTENTIAL to cause LOSS or HARM.
Attack: Is EXPLOITATION OF VULNERABILITIES by a THREAT. It can be SUCCESSFUL or UNSUCCESSFUL.
Control: An action, device, procedure or technique that removes or reduces a vulnerability. A COUNTERMEASURE that PREVENTS threat from
exercising vulnerabilites.
Note: A THREAT is BLOCKED by the CONROL OF VULNERABILITY i.e for you stop a threat, you have to control vulnerability- mitigate it. don't 
let it happen. Ensuring the control of vulnerability to mitigate threat.
Threat can be due to HUMAN CAUSES or NATURAL CAUSES. Threats can be benign or malicious. Threats can be random or directed.
Types of Threats:
1. Eavesdropping: interception of information intended for someone else during its transmission over a communication channel.
2. Alteration: An unauthorized modification of information e.g the man-in-the-middle attack, where a network stream is intercepted,
modified, and transmitted. Modifies the info from SENDER to RECEIVER.
3. Denial of Service: the interruption or degradation of a data service or information access. e.g email spam to fill up a mail queue, so
that it can slow down the email server.
4. Masquerading: Fabrication of information that is purported to be from someone who is not actually the author.
5. Repudiation: The denial of a commitment or data receipt e.g backing out of a contract or protocol that requires the different parties
to provide receipts acknowledging that data has been received.

Control/Countermeasures:
There are 3 types of controls
Physical controls: e.g locks, human guards etc
Procedural/Administrative Controls: laws/regulations, policies/procedures/guidelines
Technical Controls: Use technical measures e.g password, access controls. firewalls, intrusion detection systems (ids), encryption.

The 10 Security Principles:
1. Economy of mechanism: It is a principle that STRESSES the SIMPLICITY in the DESIGN and IMPLEMENTATION of SECURITY MEASURES. A simple
security framework will enable understanding by developers and users and causes efficient development and verification of enforcement methods.
KISS rule- Keep It Simple Strictly
2. Compromise recording: The principle states it is sometimes MORE DESIRABLE to RECORD THE DETAILS of an intrusion than to adopt MORE
SOPHISTICATED measures to prevent it.
3. Fail-safe default: It is a principle that STATES that the default configuration of a system should have a CONSERVATIVE PROTECTION SCHEME
e.g when adding a new user to a system, the default group of the user should have minimal access right to files and services. Fail-safe
design in engineering is a feature or practice that in the event of a failure, there will be minimal or no harm to other equipment, environment
or people.
4. Work factor: The principle states that the COST OF CIRCUMVENTING a security mechanism should be compared with the resources of an attacker
when designing a security scheme. e.g a school website security (less security) vs government agency (complex and more money)
5. Complete mediation: The principle is every access to a resource needs to be checked for COMPLIANCE WITH A PROTECTION SCHEME e.g an online
banking website should require users to sign on again after a certain amount of time e.g 15 minutes.
6. Psychological acceptability: The principle states that user interfaces should be WELL DESIGNED AND INTUITIVE, and all security-related
settings should adhere to what an ordinary user might expect.
7. Least common mechanism: In systems with MULTIPLE USERS, mechanisms allowing resources to be SHARED BY MORE THAN ONE USER SHOULD BE MINIMIZED.
8. Least privilege: Each user of a computer system should operate with athe bear minimum privilege necessary to function properly.
9. Separation of privilege: The principle states that multiple conditions should be required to achieve access to restricted resources or
have a program perform some action.
10. Open design: The principle states that the SECURITY ARCHITECTURE and DESIGN of a system should be made publicly available.
Making it open will allow it to be scrutinized by multiple parties and enable discovery and coorection of vulnerabilities on time.
Security should rely on keeping ONLY cryptographic keys secret. It is opposite of SECURITY BY OBSCURITY
Kerckhoff's principle: A cryptosystem should be SECURE even if everything about the system, except the key is public knowledge.

#ACCESS CONTROLS
- Users and Groups
- Passwords
- Authentications
- File protection
- Access Control Lists
Which users can read and write which files?
Are my files really safe?
What does it mean to be root?
What do we really want to control?
#Access control overview
Access Control Policy: Who + What + How = Yes/No
Subject: Who? Jide
Mode of access: How? read
Object: What? Week2.ppt

Access Control Matrices: A table that defines permissions
	  /etc/password	      /usr/bin/	    /u/Jide/	        /admin/
root	read, write	  read, write,exec	read,write,exec	read, write, exec
Jide	read	        read, exec		
Lana	read	        read, exec	      read,write,exec	
backup	read	      read, exec	      read,exec	       read, exec

Access Control List:
Capabilities:
Role-Based-Access Control: For large number of users e.g 1000 users. very scalable


#Week3
################
#Objectives
#Understand the basic concepts of symmetric and public key encryption
#State the mechanisms for digital signature, hashing and message authentication code
#State the password functions and complexity

#Cryptographic concept
It is a MEANS to allow 2 parties, CUSTOMARILY Jide and Lola, to ESTABLISH a CONFIDENTIAL COMMUNICATION of an INSECURE CHANNEL that is SUBJECT
to EAVESDROPPING.
#Encryption and Decryption
Jide will convert a plaintext M (message)to an ENCRYPTED form using an ENCRYPTION ALGORITHM E that outputs a CIPHERTEXT (C) for M
Once Jide the sender sends the message that is encrypted, it turns to ciphertext in transit, and once it gets to the recipient, Lola.
Lola can decrypt the ciphertext to a plaintext using an encryption algorithm too. Therefore no attacker can eavesdrop the message in
traffic.
#Equation

C = E(M)
M = D(C)
Where M = plaintext
C = Ciphertext
E = Encryption function
D = Decryption function
#Explanation: The plaintext M is ENCRYPTED through the function of E to CONVERT it to CIPHERTEXT C i.e C = E(M)
#TO DECRYPT: The CIPHERTEXT C  is input to the function of D, which converts it to the original message

#CEASAR CIPHER
Replacing each letter with the "three over" in the alphabet
Key k is the number of shifts in alphabet and the value of the key was three (k = 3)
Right shifting for ENCRYPTING
Left shifting for DECRYPTING
ENCRYPTING => C = E(M) = M + k
              M = D(C) = C - k

#Symmetric Encryption
When both Jide and Lola dont share the same key i.e when it requires each pair of communication parties to share (a SEPARATE) SECRET KEY.
i .e just one single key
For 2 participants? 1 Key
For 3 participants? 2 Keys
For N participants? N - 1 Keys.

#Public Key Cryptography
It requires 2 keys- Private key, which is a secret key and a Public key, which is broadcasts widely.
For Jide to send an encrypted message to Lola, he only needs his PUBLIC KEY (PK), to ENCRYPT his message and send it to LOLA. Then Lola
will use her SECRET KEY to decrypt the message.
Widely known example of public key is RSA
Seperate keys are used for ENCRYPTION and DECRYPTION

#CRYPTOGRAPHIC HASH FUNCTIONS
It is
One way: should be EASY to COMPUTE Y = H(M), but HARD to FIND M given Y only.
Collision resistant: It should be HARD to FIND 2 messages, M and N, such that H(M) = H(N)
Length of M can be a variable, but message digest Y has always the same length e.g SHA-1, SHA-256
Hash is used for DATA INTEGRITY, if 2 parties share a secret key. Digest key in hash
Message Authentication Code (MAC)

#Digital Signatures
Public key encryption provides a method for doing digital signatures. To sign a message, M, Jide can ENCRYPT it with his private key.
Anyone can DECRYPT it using a valid public key.
Digital Certificates: digitally SIGNS a binding between an IDENTITY and the PUBLIC KEY for that IDENTITY.
Strong passwords: Combination of upper case, lower case, special characters and numbers.
Social Engineering: ways to hack a password. it is of different types.
1. Pretexting- creating a story that convinces an adminor operator into revealing info.
2. Baiting- offering a kind of gift to get a user or agent to perform an insecure action
3. Quid pro quo: Offering a kind of action or service and then expecting something in return.

Current function foe encrypting and decrypting in ceazar cipher is C = E(M) = (M+k)% 26
Number of keys required for N participants in symmetric encryption is N(N-1)/2
Number of keys required for N participants in asymmetric encryption is 2N


##############################
#### OS SECURITY
#Objectives
- Basic concepts of OS including processes, file system, memory and virtual machines
- Functions that monitor and protect the processes
- Understanding password-based authentication and salting (password security with a concept of salting)

OS controls the CPU, RAM, I/O and Disk drive in a computer; it manages the ways apps access the resources in a computer e.g the disk drives,
 CPU, main memory, input and output devices, and network interfaces
- OS MANAGES multiple users.
- OS MANAGES multiple programs.

In the filesystem in your computer/server, the topmost directory in the tree of directories/folders is the root directory/folder. The tree
can be accessed via the file explorer.
#File permissions
File permissions are TOOLS for access control
File permissions are CHECKED by the OS to determine if a file is READABLE, WRITABLE or EXECUTABLE by a user or group of users.
In Unix like OS(Linux), there is a FILE PERMISSION MATRIX that has OWNER PERMISSIONS (what owners can do), GROUP PERMISSIONS (what some group of users can do)
WORLD PERMISSIONS( deafult access right)
An example of file permissions below:
jide:~/java % ls -l
total 24
-rwxrwxrwx  1 jide department  1234 Feb 21 01.44 Floats.class
-rw-r--r    1 jide department  2341 Feb 21 01.44 Floats.java
-rw-------  1 jide department  3214 Feb 21 01.44 Test.java

In the above file permissions for Linux, there are 3 types of permissions (READ, WRITE and EXECUTABLE FILES) 
The types of access that are available in LINUX are OWNER, GROUP and WORLD (for other permissions)
e.g in the above file matrix, the file named (Test.java) is OWNED by Jide, the group for the file is department
The first set of "rwx" is for OWNER, the next set of "rwx" is for GROUP, the last set of "rwx" is for WORLD(Others)
Test.java is only ACCESSIBLE by the OWNER i.e  Jide
Floats.java has OWNER having read and write access, GROUP(department group) having read access and OTHERS having write access
Floats.class has anybody having all the privileges or access including read, write and executables.

#Password security
Approach to GUESSING password from PASSWORD FILE is to CONDUCT a "DICTIONARY ATTACK"; where each word in a dictionary is HASHED and the
resulting value is COMPARED with the HASHED PASSWORDS stored in the PASSWORD FILE
- A dictionary of 500,000 "words" is often enough to discover most passwords
- You can achieve cracking of password by this because the passwords are not multi characters enabled.
- 10 minutes to complete the hashing

#Password salt
A technique used to make distionary attack harder to be cracked
- when you associate a random number with password
- Rather than COMPARING the HASH of an entered password with a STORED HASH of a password, the system COMPARES the HASH of an ENTERED PASSWORD
the SALT for the associated password with a stored hash of the password and salt.
- 2 quandrillion- longer than a million years to complete this

How Password Salt Works:
Without Salt:
1. Userid X, Password P
2. System will look H, the STORED HASH of X's Password(P)
3. System will TEST whether h(P) = H.
Password File -----> X:H

With Salt:
1. Userid X, Password P
2. System will look up S and H, where S is the RANDOM SALT for userid X  and H is the STORED HASH of S and X's Password(P)
3. System will TEST whether h(S||P) = H.
Password File -----> X:S,H

#Linux Password File
Linux has 2 files to keep the password info.
Password file keeps the basic user info including the BASIC USER ID
Shadow file keeps the hash password info and salt info
- /etc/passwd: basic user and password info (world readable)
- /etc/shadow: encrypted password info- based on one way function. readable only by super user. only accessible by ROOT USER


####Week 6
- Memory and file system security
- Linux file system permissions
- Application program security including the concept and mechanism of buffer overflow attacks

#Access Control Model:
1) Discretionary Access Control (DAC): It is the type of model where
- The owner grants access to others.
- The owner may define the type of access (write/read/execute) given to others.
2) Mandatory Access Control (MAC): Model where
- The admin grants access to users
- Multiple levels of SECURITY for users and documents
- Levels e.g in military - Top secret > Secret > Confidential > Restricted > Unclassified

DAC is the standard MODEL used by operating system.
Access Control Entries and Lists:
An Access Control List (ACL) for a resource e.g file or folder is the SORTED LIST of zero or more of Access Control Entries (ACE)
ACE means a certain set of accesses e.g READ, WRITE, EXECUTE to the resource is ALLOWED or DENIIED to a user or group.
Examples of ACEs for folder "CSI351_Grades"
- Bob; Read; Allow
- TA's; Read; Allow
- TWD; Read, Write, Allow
- Bob; Write; Deny
- TA's; Write; Allow
#Two Types of Policies
- Open Policy
- Closed Policy
Open Policy: 
- Access is ALLOWED by default.
- Deny Tom read access to "foo"
- Deny Bob r/w access to "bar"
Examples:
Tom says "I would like to read foo"
Answer: Denied
Tom says "I would like to read bar"
Answer: Allowed (Because access is allowed by default)

Closed Policy:
- Also called "default secure".
- Give Tom read access to "foo"
- Give Bob r/w access to "bar"
Examples:
Tom says "I would like to read foo"
Answer:  Allowed
Bob says "I would like to read bar"
Answer: Denied.

Closed Policy with Negative Authorizations and Deny Priority:
- Give Tom r/w access to "bar"
- Deny Tom write access to "bar"
- Tom: I would like to read "bar" ---- READ
Answer: Allowed
- Tom: I would like to write "bar"
Answer: Denied
This kind of policy is used by Windows to manage access control to the file system.

Differences between Windows and Linux
Linux:
- Allow-only ACEs
- Access to file depends on ACL of file and of all ancestor folders
- Start at root of file system
- Traverse path of folders
- Each folder must have execute permission(cd)
- Different path to the same file not equilvalent
- File's ACL must allow requested access

Windows:
- Allow and Deny ACEs
- By default, deny ACEs precede allow ones
- Access to file depends only on file's ACL
- ACLs of ancestors ignored when access is requested
- Permissions set on a folder usually propagated to descendants (inheritance)
- System keeps track of inherited ACE's

#Linux File System
- Tree of directories (folders)
- Each directory has links to zero or more files
- File Access Control for:
Files
Directories
Therefore....
- \dev\: devices
- \mnt\: mounted file systems
- Sockets, pipes, symbolic links.
Linux permissions:
To see permissions, run "ls -l"
Knowing the meaning the permissions and output e.g
-rwxr-x--- 1 jk ugrad 16 2005-10-13 7:18 myfile.txt

- first hyphen means FILE / DIRECTORY
- The next "rwx" means "OWNER PRIVILEGE"
- The next "r-x" means "GROUP PRIVILEGE"
- The next "---" means "WORLD PRIVILEGE"
- jk means "OWNER"
- ugrad means "GROUP"
- 16 means "SIZE"
- 2005-10-13 7:18 means "MODIFIED date/time"
- myfile.txt means "NAME"

Octal Notation:
- r = 4
- w = 2
- x = 1
rwxr-x--- = 750

Permissions for Directories:
Read: bit allows listing names of files in directory, but not their properties like size and permissions
Write: bit allows creating and deleting files within the directory
Execute: bit means entering the directory and getting properties of files in the directory
Special permission bits:
- Set-user-ID ("suid" or "setuid") bit
- Set-group-ID ("sgid" or "setgid") bit
- Sticky bit
Set-user-ID ("suid" or "setuid") bit:
- Causes the program to run as FILE OWNER regardless of who runs it.
- Ignored for everything else
- In 10-character display, replaces the 4th character (x or -) with s (or S if not executable)
-rwsr-xr-x: setuid, executable by all
-rwxr-xr-x: executable by all, but not setuid
-rwSr--r--: setuid, but not executable - not useful
Sticky bit:
- On directories, prevents users from deleting or renaming files they don't own
- Ignored for everything else
- Replaces 10th character (x or -) with t
drwxrwxrwt: sticky bit set, full of access for everyone
drwxrwx--t: sticky bit set, full of access for user/group
drwxr--r-T: sticky bit set, full of access for everyone
Commands to change permissions:
chmod - change mode
chgrp - change group to any group in which the user is a member.
chown - change owner
with r command- means recur - change for a particular file and everything within it.
Explot: An exploit is any input(software, argument string, commands)  that takes advantage of a bug, glitch or vulnerrability in order to cause attack
Attack: An unintended or unanticipated behavior that occurs on software, hardware or electronics that bring advantage to an attacker.
Buffer Overflow Attack: It is one of the most common OS bugs. The following could cause it
1. Dev FAILS to include code that checks whether an input string fits into its buffer array
2. An INPUT to the RUNNING PROCESS exceeds the length of the buffer
3. The INPUT string OVERWRITES a portion of the memory of the process.
4. Causes the application to BEHAVE improperly and unexpectedly.
Effect of a buffer overflow:
- The process can operate on malicious data or execute malicious code passed in by the attacker
- If the process is executed as root, the malicious code will be executing with root privileges.
Buffer flow vulnerabilities:
- Out-of-bounds memory accesses used to CORRUPT program's intended behavior.
- Most common class of implementation flaws.
Example:
char sample [10];
sample[10] = 'B';
Places where buffer can overflow:
Memory-
Can affect "user's data"
Can affect "user's code"
Can affect "system data"
Can affect "system code"

Malicious Code Injection:
char buf[80];
  int (*fnptr) ();

- function pointer fntpr invoked somewhere else
Risk: An attacker can OVERWRITE fntpr with any address, redirecting project execution
- Can input contains malicious machine instructions, followed by pointer to OVERWRITE fntpr
- When fntpr is next invoked, flow of control is redirected to malicious code
# Stack smashing attack
- First, attacker STASHES malicious code sequence somewhere in program's address space.
- Attacker provides carefully chosen 88 bit sequence next (last four bytes chosen to hold code's address overwrite saved return address)
- When vulnerable () returns, VPU loads attacker'd return address -handling control over to attacker's malicious code.

Overflow countermeasures:
- Staying within bounds
- Many languages have overflow protections (check lengths before writing, confirm that array subscripts are within limits, double-check boundary
condition code for off-by-one errors, limit input to number of acceptable characters, limit program's privileges to reduce potential harm)
- Code analyzers can identify many overflow vulnerabilities.
- Canary values in stack to signal modification

Other programming oversights
- Undocumented access points(backdoor)
- Off-by-one errors
- Integer overflows
- Un-terminated null-terminated string
- Parameter length, type, or number errors
- Unsafe utility libraries.


####Week 6
- Various types of malware and history of malware
- Insider attack tools including backdoor and logic bombs and defenses against insider attack
- Characteristics and classifications of viruses and defenses against them
Malware:
- Programs planted by an AGENT with malicious intent to cause unanticipated or undesired effects
- Insider attacks: backdoor, logic bomb.
- Computer viruses
- Malware attacks: Trojan horses, worms rootkits
- Privacy-invasive software: Adware, spyware

Malware tranmission and propagation:
- Setup and installer program
- Attached file
- Document viruses
- Autorun
- Using non-malicious program (appended viruses, viruses that surround a program, integrated viruses and replacement)

Countermeasures
- Use software acquired from reliable sources
- Test software in an isolated environment
- Only open attachments when you know them to be safe
- Treat every website as potentially harmful
- Create and maintain backups.
Viruses, worms, trojan, rootkits:
Malware can be CATEGORIZED into various categories depending on PROPAGATION and CONCEALMENT
Propagation:
- Virus: human-assisted propagation (e.g open email attachment)
- Worm: automatic propagation without human assistance
Concealment:
- Rootkit: modifies the OS to hide its existence
- Trojan: provides desirable functionality but hides malicious operations.

Insider Attacks:
A security breach that is caused or facilitated by someone who is part of the org that controls or builds asset that should be protected.
- A security hole that is created in a software system by one of its programmers.
Backdoor:
Sometimes called "trapdoor"
- It is HIDDEN FEATURE or COMMAND in a program that allows a user to perform actions he or she would not be normally allowed to do
- If the hidden feature is activated, the program will do something unexpected , often in violation of security policies e.g performing a
privilege escalation.
Logic bomb:
- A program that performs a malicious action as a result of a certain logic condition.
- e.g combining logic bomb with backdoor, where a programmer puts a logic bomb that will CRASH a PROGRAM on a certain day.
e.g Tim LLyod Logic bomb on Omega Engineering Coorporation (1996)

Omega Bomb Code: The logic behind it is the following stings
- 7/30/96 (Event that triggered the bomb)
- F: (Focused attention to volume F (drive, which has critical files))
- F:\LOGINLOGIN\12345 (Login a fictitious user, 12345 (the back door))
- CD \ PUBLIC (Moves to the public folder or program)
- FIX.EYE /Y F:\*.* (Run a program called FIX, which actually DELETES everything)
- PURGE F:\/ALL (Prevent recovery of the deleted files)

Defenses/Countermeasures against insider attack
- Avoid single points of failure
- Use code walk-throughs
- Use archiving and reporting tools
- Limit authority and permissions
- Physically secure critical systems
- Monitor employee behavior
- Control software installations

#Computer virus
It is a computer code that can REPLICATE itself by modifying other files or programs to insert code that is capable of further replication
- Replication requires user assistance e.g clicking an email attachment or sharing USB drive.

Analogy of Computer virus with Biology viruses
Attack -----> Penetration -----> Replication and Assembly ----> Release.
- When Early Was One Sci-fi movie in 1972
- Ph D student Fred Cohen used the word VIRUS in 1984 and credited advisor Len Adelman for it.
- Rich Skrenta a high school student released the first virus hit Erik Cloner( a boot sector virus) in 1982
- Basit and Amjood Faroq  Alvi were credited for Brain virus that infected PCs in 1986


#Week 8
Different types of malware attacks
- Worms
- Trojan horses
- Rootkits
Privacy-invasive software description: adware, spyware
Countermeasures and best practices

Computer worms: is a MALWARE PROGRAM that spreads copies of itself without injecting itself in other programs, and often without HUMAN INTERACTION
So technically, computer worms are not COMPUTER VIRUSES since they don't infect other programs, but people confuse the term because they self-replicate too
In most cases, worms will carry a MALICIOUS PAYLOAD e.g deleting files or installing a backdoor. i.e worms can delete files and install backdoor
- First worms were built in the lab of John Shocks and John Hepps at XEROR PARC in the eraly 80s.
- The first worms to use email service is CHRISTMAS EXEC written in REXX, targeting IBM VM/CMS systems in 1987
- First internet worm was Morris Worm. It was written by Cornell student, Robert Tappan Morris in 1988
#Worm Development- How to develop worm. How to implement worm
- Identify vulnerability still unpatched
- Write code to (defined in the code how to spread through ramdomized hosts or lan or divide and conqquer and get installed. The code will include the PAYLOAD and REPORTING)
  - Exploit vulnerability
  - Generate a target list
    - Random hosts on the internet
    - Hosts on LAN
    - Divide and conquer
  - Installation and execution of PAYLOAD
  - Querying nad reporting if a PAYLOAD is infected.
- Initial deployment on botnet
- Worm template:
  - Generate target list
  - For each host on the target list
    - Check if infected
    - Check if vulnerable
    - Infect
    - Recur
= Distributed graph search algorithm:
  - Forward edges: infection
  - Backward edges: already infected or not vulnerable
Worms spread by finding and infecting VULNERABLE HOSTS.
- Needs a way to tell if a host is vulnerable
- Needs a way to tell if a host is infected
#Malware Zombies
Malware can turn a computer into a zombie- a machine controlled externally to perform MALICIOUS ATTACKS, usually as part of a BOTNET.

      BOTNET CONTROLLER(Attacker)
         
         ATTACK COMMANDS

            BOTNET

        ATTACK ACTIONS

            VICTIM
#Propagation: Theory
Classic epidemic model:
N = Total number of vulnerable hosts
I(t) = Number of infected hosts at time t
S(t) = Number of susceptible hosts at time t
N = I(t) + S(t)
Betta = infection rate
Differential equation for total number of infected hosts I(t):
dI/dt = BI(t) S(t) = Infection rate*Total number of infected hosts * Total number of susceptible hosts at time t
I on the y axis and t on the x-axis

Code Redl v2 infection July 2001

#Trojan Horses
It is a MALWARE PROGRAM that APPEARS to perform USEFUL TASKS, but does something with negative consequences e.g launches a KEYLOGGER
They can be installed as PAYLOAD of other MALWARE, but often installed by a USER or ADMIN, either deliberately or accidentally.
Visible action (something useful)--------> Invisible action (Something malicious)

#Rootkits
A rootkit MODIFIES the OS to HIDE its existence. e.g modifies file system exploration utiliites
Hard to detect using software that relies on the OS itself.
SONY XCP(2005)
- Installed automatically from Sony Music CD (without user's knowledge) using Windows's autorun feature
- Prevents a user from copying tunes
- Intercepts function calls from reading from CD drive
- Scramble the call if the call was from other applications
- Concels not only XCP but any program beginning with $sys$ from any source, malicious or not
- Any virus writer can CONCEAL a virus by naming it $sys$virus-1
#Detecting Rootkits. How to detect rootkits
- Maintain database of cryptographic hashes for
Operating system files
Popular applications
Known infected files
- Compute hash of each file
- Look up into the database
- Needs to protect the integrity of the database

#Current Trends
According to Symantec Internet Security Threat, 2009. Trojan currently have LARGEST INFECTION POTENTIAL
- Often exploit browser vulnerabilities
- Used to download other MALWARE in MULTI-STAGE ATTACK
Trojan - 68%
Worm - 29%
Virus - 19%
Backdoor - 15% 
- Lovebug in 2000 caused $8.75Billion in damages and affected British Parliament
- W32/MyDoom.A infected 8% of emails in 2004
- Russian Stock Exchange was taking down by a virus February 2006
Since 2002 Malware attack has grown exponentially- new threats continue to emerge
According to purplesec report in 2018
- 92% of malware is delivered by email.
- Mobile malware increased by 54% in 2018
- More than 250k unique users  were attacked by Trojans (Banker.AndroidOS.Asacub)
- 98% of MOBILE MALWARE target Android Devices.
- MacOS malware has increased by 165%

#Adware
  ADWARE SOFTWARE PAYLOAD
    Adware engine infects a user's computer
    Computer user gets agitated
    Adware engine requests advertisement from adware agents -- Advertiser contract with adware agent for content
    Adware agents deliver ad content to user
#Spyware
  SPYWARE SOFTWARE PAYLOAD
    Spyware engine infects a user's computer
    Spyware process collects keystrokes, passwords, and screen captures
    Spyware periodically sends collected data to spyware data collection agent

Signatures: A malware countermeasure
Scan compare analyzed object with a database of signatures.
A signature is a virus fingerprint e.g a string with a sequence of instructions specific to each virus. Different from digital signature
A file is infected if there is a signature inside its code - using fast pattern techniques to search for its code.
All the signature together create the malware database that usually is proprietary.
Code Red Warm Signature:
/default.ida?NNNN**********=a HTTP/1.0
#STORAGE PATTERN
- Code loacted on a specific address
- Suspicious pattern e.g a jump INSTRUCTION as the first instruction of a program
- File size changed as a result of the attached virus
- How to know file change--
1) Checksum (MD5 ) can be used to CHECK actual contents
2) Using cryptographic function can enable that too
#EXECUTION PATTERNS
- Expected program behaviors
- Anomaly detection
- Deviation from the expected program behavior can be an alert for virus.
#TRANSMISSION PATTERNS
- One of the important goals of virus is to SPREAD itself
- Worms always show a unique TRANSMISSION PATTERN (e.g internet worm and code red)
SHIELD VS ON-DEMAND
Sheild
- Background process (service/deamon)
- Scans each time a file is touched
On-demand
- Scan on explicit user request or according to regular schedule
- On a suspicious file, directory or drive etc
Online VS Offline Anti Virus Software
Online Anti Virus Software:
- Free browser plug-in
- Authentication through 3rd party certificate (i.e Verisign)
- No shielding
- Software and signature updates at each scan
- Poorly configurable
- Scan needs internet connections
- Report collected by the company that offers the service
Offline Anti Virus Software:
- Paid annual subscription
- Installed on the OS
- Software distributed securely by the vendor online or retailer
- System shielding
- Scheduled software and signature updates
- Easily configurable
- Scan without internet connection
- Report collected locally and may be sent to vendor.
#QUARANTINE
- A suspicious file can be isolated in a folder called quarantine.
- The suspicious file is not deleted but made harmless. User can decide when to remove it or eventually restore for a false positive
- The file in quarantile is harmless becaiuse it is encrypted
- Technique in quarantile is PROPRIETARY and details are kept secret


#### Week 9
#Network Security

#Understand the basic concepts of modern computer network and layered architecture
#State vulnerabilities of intermediate layers (link, transport and network)
#Denial of service attacks and their methods

    Application      #Addressing Types Below
      |
      |
    Transport        #(Port Number) (Transports traffic via ports)
      |
      |
    Network          #(IP Address) (Transports traffic via IPs)
      |
      |
    Link             #(MAC Address)(LAN Address)  (Transports traffic via MAC)

Physical  #(Ethernet)  (Fibre Optics) (Wifi)  (Helps with the traffic transports via any of these)

The "Intermediate Layers": Link, Network and Transport layers
#Link Layer
- LAN : Ethernet, Wifi, Fiber optic
- 48 bit Media Access Control (MAC) Addresses
- Packets called "Frames"
#Network Layer
- Internet wide communication
- Efforts
- 32-bit Internet Protocol (IP) named IPv4
- 128-bit Internet Protocol (IP) named IPv6
#Transport Layer
- 16-bit addresses (ports) for classes of applications
- Connection oriented Transmission Layer Protocol (TCP)
- Connectionless User Datagram Protocol (UDP)

#Network based attacks
- Denial of service : DOS attacks using bot nets
- Man in the middle : Man in the middle attack using IP scoping and session hijacking
- Eavesdropping : Using packet sniffing bots
- Victim network
- Masquerading

#Network Security Issues in terms of CIA Triage (Trying to show that network is not secure by default)
Confidential: No requirement to keep the contents of network packets confidential. ENCRYPTION could either be in Application Layer (HTTPS)
or lower layer protoocol (IPsec)-network layer. Wide wide west, just providing security via encryption
Integrity: The HEADERS and FOOTERS that contain the DATA PACKETS have SIMPLE CHECKSUMS to validate the INETGRITY OF DATA and/or HEADER CONTENTS
Checksums are not CRYPTOGRAPHICALLY secure. Not really secure, only providing security via checksums
Availability: The inetrnet was designed to TOLERATE failures of routers and hosts.There is an aavailability challenge for network to be open
24/7. Not really security tolerant, can still be overwhelmed.
Assurance: By default, a packet is allowed to travel between any source and destination in a network. Network firewalls are designed to block
traffic in and out of a network domain if that traffic violates policies set by admin.
Authenticity: The headers and footers for the standard internet protocols DONT have a place to put digital signatures (and no notion of user identities)
Anonymity: The ineternet has a built-in identities( with no user identities). Attackers on anonymity can come from technologies that identify
a computer a person is using.

#Link Layer Vulnerabilities
ARP Cache maintains the MAPPING between IP address and MAC address
Update will be through ARP request (Host) and ARP reply (Destination host)
Attack: MAC spoofing attack (impersonating another machine)
#ARP Cache example
IP Address                     MAC Address                        Type
128.148.31.1                00-00-0c-07-ac-00                  Dynamic
ARP Posisoning: (ARP Spoofing)
Almost all ARP implementations are STATELESS. An ARP Cache UPDATES every time it RECEIVES and ARP REPLY(Dest), even if it did not send any
ARP REQUEST. Therefore, it is easy to POISON an ARP CACHE by sending anonymous ARP REPLIES.
Using STATIC ENTRIES solves this problem, but it is very challenging to MANAGE
An attacker will stay in the middle and provide false info to the ARP Cache that will poison it. Instead of communication between A(Request)
and B (Reply). An attacker will be C (Stay in the middle and manipulate the communication between A and B with provide IP and MAC addresses)
#NETWORK LAYER VULNERABILITIES
IP Spoofing: It is an attempt by an intruder to send PACKETS from IP address that appear to originate at another. Manipulating the source
address to be from a legitimate source that can be trusted. You have a source address and a destination address. The soource address will be
modified or overwritten with a different IP address.
There are 2 basic source of IP spoofing
- Blind spoofing: Spoofing from any source
- Non Blind Spoofing: Attack from the same subnet
Packet Sniffing: They READ information through a network.
- They INTERCEPT network packets e.g using ARP posisoning.
Packet sniffer is a legitimate tool to ANALYSE a network, but it can be used maliciously as well.
#Legitimate uses
- Monitor network usage
- Filter network traffic
- Analyze network problems
#Malicious use
- Steal info (passwords, conversations)
- Analyze network info to prepare an attack
Packet sniffers can either be a software or hardware.
#Example of packet sniffer - Wireshark
Wireshark is a PACKET SNIFFER and PROTOCOL ANALYZER. It is an open source tool www.wireshark.org. It usually requires Admin privileges to
run. It can capture traffic across the entire LAN segment and not just frames addressed to a machine.You install it on a machine. If the
info seen is not encrypted, it can be used or discovered by a bad actor.
- It CAPTURES and ANALYZES FRAMES
- It SUPPORTS PLUGINS
#WAYS TO STOP PACKET SNIFFING
It is always HARD to detect packet sniffers, because they are PASSIVE (Packet sniffers usually collects DATA but don't make entry to STEAL data)
Best way to stop it is:
- Encrypt packets securely (sniffers can collect the data, but it will be meaningless to them)
- Don't let them into your system at all. Secure your system

#TRANSPORT LAYER VULNERABILITIES
#TCP VULNERABILITIES
TCP is a Transport Layer Protocol that GUARANTEES reliable data transfer,and deliver messages in order, and has the ability to distinguish
data for multiple concurrent apps on the same host.
Most popular app protocols e.g WWW, FTP, SSH and others are built on TCP . Application protocols built on Transport Layer Prototcol.
TCP connection is made possible by using a pair of IP address and Port Number.
Attack:
- Session Hijacking: TCP session (connection) can be HIJACKED by a bad actor. Launch a man in the middle attack or ip spoofing to hijact it
Take control of a network session. An attacker stays in the MIDDLE between the Client and Server using ARP Spoofing. Making the client the 
victim and server, the target.

#Denial of Service Attack. It is a type of network attack
- Sending LARGE NUMBER of PACKETS to host providing service, to slow it down or crash it. It is often executed by botnets. Can be classified into
2 - Flooding attacks and Crashing as explained
- Attack gets propagated, starting as zombies, then travels through tree of internet routers rooted
- Can also originate from IP source spoofing, where attacker is hidden and scatters return from traffic. Used by bot attacks.
Examples of DOS Attack:
#Smurf Attack
Using a misconfigured network and exploiting it to overwhelm the bandwidth of a target.
#SYN Flood
Botnet will be used to flood a victim's machine with SYN traffic. To overwhelm the victim's network.

####Week 10 Network Security Continued