#process
#use a terminal e.g kali
#run netdiscover -r first octet of your ip, then 0/24. the r means range
#netdiscover -r 192.168.202.0/24- specifying dot 0 and scanning the entire subnet - 24
#you should expect .1 and .2 to be active, they are active by default.
#the 3rd ip scanned will likely be theatrics.
#Go to nessus and sign in
#Do a new scan
#Do a basic network scan
#Enter the name of the host e.g kioptrix for me- a host vm, Give it a description and conplete the steps on the page
#Select "Discovery" and select "port scan "all ports" from the "Scan Type"
#Go to "Assessment" and leave the "Assessment" as default. Or select "scan for known vulnerabilities"
#Leave "Report" as default
#Leave "Advanced" as default
#Save it
#Click on launch and watch it work
#Go back to the host and do nmap on it i.e nmap -T4 -p- $ip
#you can include -A FOR ALL IN THE COMMAND AND ENTER ALL THE PORTS too, to get the result that you want
#nmap -A -T4 -p80,443,22,119 $ip
#You can check your nessus result. focus on services vulnerabilitie sresult
#from the terminal, we can see the ports that are opened, the type of OS, the server
#if 139 is open, it means smbd
#maybe get an rpc bind etc
#why do they have ssh 139 open - maybe because of fileshare
#why do they have 22 open?
#opening the above ports internally are not of a big deal, but externally is a big deal.
#Order that i will be looking at the open ports- 80, 443, 139.
#because i am doing pen testing and not web app assessment, i will be focussed on all these
#maybe do sql injection on their login page if it is open, but nothing on cross-site scripting and all that.
#copy the host ip, and check if you can access it through the browser using ports 80 and 443
#Finding 1
You have got a default test page opened externally for ports 80 and 443
# 2 issues (though low hanging fruit)
We have got info that they are using Apache (gave out info about what type of framework you are running)
We have got info that they are using red hat(gave out info about what type of OS you are running)
#Why are they running a test page online. Did they forget to turn it off or what?

#Notes
A folder with Vulnerabilities(low) as name
A subfolder under it with "Default Web Page) as name. you can put the ip or ips of the host you identified
Use greenshot to take an ss of the test page completely and right click and select "image editor"
Click on the icon that can enable you to highlight critical vulnerabilities on the test page e.g
highlight the "Test Page"
click on the "Copy" button from the top and paste it where you are notating in the subfolder (Default Web Page)

#we can look at the comments to see if it is a real website and try to find the source code, but since it is a test, nothing maybe found
#since we have port 80 opened on the test page, we have a tool in kali that we can use to further ENUMERATE. you run a nikto on host-given host
# run "nikto -h ip" h is for host
It is pulling a server header with a response header
pulling apache 1.3.20 - another finding
leaking E tags
mod ssl
#we may see some missing headers e.g if it is saying anti-Clickjacking is not defined or XXL is not defined
#these are for web app assessment and not for pen testing, so you may not add this, to avoid being nitpicking.
#though DoS is out of scope for this kind of assessment, but it can also be notated if found as vulnerable
#anything that is vulnerable, the ports, framework or whatever that is open, will have the kinds of attacks
#it is opened to stated.

#ran this for my ip as host, check what is found.
┌──(root㉿kali)-[~]
└─# nikto -h $my ip              
- Nikto v2.1.6
---------------------------------------------------------------------------
+ No web server found on $my ip
---------------------------------------------------------------------------
+ 0 host(s) tested

#ran that for tesla, i found too much
nikto -h https://tesla.com

#you may find some directories
#allowed http- mainly for web app assessment and not for external testing like this

#you can run "durbuster" to get more info, it will ask you for a few things.
#this is like brute forcing the directories
#looking for any type of file or directories we could find.
#copy the http url of the test page for the host that was found and paste in the target url for dirbuster.
#you may find some hidden directories
#swith the "No of threads" from 10 to faster, if it is not already.
#to add list of specific directories
#click on "browser"
#click on back
#click on "user"
#click on "share"
#click all over till you see wordlist
#you will see a folder called dirbuster, double click on it.
#you can select the small or medium directory file as you want it
#select the file and go back to dirbuster ui
#select "Brute force dirs"
#select "Brute force files"
#select "Be recursive"
#start with "/"
#as file extension, since the host is running apache server, you can enter "php"
#you can add file extensions probably, comma, asa,sql, zip, tar, txt, bak
#click on the "Start" button at the bottom
#you can dig deep whereever you find code 200, which means success for that particular file.
#e.g if you find a "usage" file, just click on it and dig deeper
#I have found some info, but i am not sure if they don't care this from being disclosed.
#Is there a reason this is out on the web unauthenticated.
#if you see a webserver.html with 200, click on it and dig deeper.
#report whatever you feel is relevant from your enumeration

#lets dig deeper on the header
#go back to your terminal, kali and run the below command:
#curl --head ip

#tested this on my ip
#output
┌──(root㉿kali)-[~]
└─# curl --head $my ip
curl: (7) Failed to connect to $my ip port 80 after 0 ms: Connection refused

#tested it on the ip of my host
#it showed connections that were open.
#see apache, mod ssl, e-tag all these keep on coming up
#take an ss of that and report it
#go back to your report page and create a new page under "Vulnerabilities" folder you created.
#you can call it "Server Header Info Disclosure(low)"
#you can copy it again with greenshot and right click and select "open with image editor"
#you can convert the black background to white by clicking on the "A" icon and select "invert" -saves you some ink
#you can highlight etag and server apache info
#copy the info and go and paste it in your report
#you can copy the header url and check it on a browser to see if it will disclose some more info
#found out they are using generic "Not found" for 404 instead of theirs
#create a new page under vulnerabilities with "Deafult 404 Info Disclosure(low)"
#do IP, and go and copy or take an ss of it and paste in your report. you can highlight the "Not Found"
#always put a border around what you have on the image editor too, before you copy it and paste in your report

#go back to nessus for further enumeration
#focus on ssl certificates and ciphers
#click on "Vulnerabilities"
#if you see SSL Drown Attack Vulnerability (That is a cipher issue)
#SSL multiple issues
#Certificate cannot be trusted.
#SSL Weak Cipher Suites Supported
#You can use an excel document that can report back all these SSL issues from nessus
#If anyone were to attack these, it is usually a man in the middle attack. Because it is not easy to pull off.
#you can use nmap to notate all these issues and targeting the ip of the host you are working on
#run "nmap --script=ssl-enum-ciphers -p ip"
#Go and create another page under "Vulnerabilities" and call it "Weak Ciphers"
#Take a screenshot of all the weak ciphers and use the image editor like before
#border it and highlight the "least Strength: F"

                      
