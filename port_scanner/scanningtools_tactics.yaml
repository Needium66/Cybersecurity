#Fundamentals:
#Protocols
TCP
UDP
#Three way handsake
#Scanning and tactics. e.g burbsuite(burppro), nessus, metalsploit, nmap for scanning
#TCP  vs udp
#whenever you scan ports, you are most of the times scanning on tcp. however, you will have to scan some udp ports too cos some tools only use this
#TCP
Is connection oriented
Used by apps that requires high reliability e.g HTTP/S, FTP, Telnet
It uses three way handsake; using liveu and wireu to see how it looks like.
Anything that you will need some form of connection to.
#UDP
Connection-less
Used by apps that requires fast connection e.g DNS, SNMP, DHCP
It does not require high reliability
No handshake
#Three way handsake
run wireshark& on your kali to create a connection process
it is a network analyzer
#click on the "start" button at the top left-hand corner of the main page.
#You intercept traffic with it.
#follow this- SYN-SYN-ACK
#You will see the source ip e. from my laptop, then the destination ip e.g tesla
#i send a (syn) packet out, if the app is available e.g tesla, it will say, hey i have seen(syn) your request.
#then acknowledge it (ack) and open up the port, then send back a ack(ack) to the source and then source will
#acknowledge(ack) that, then connection will start. hello client.
#SYN
#SYN ACK
#ACK
#COMMON WAY PF SCANNING e.g with nmpa
#SYN
#SYN ACK
#RST reset


#Output
  ** (wireshark:942906) ###### [GUI WARNING] -- could not connect to display 
 ** (wireshark:942906) ###### [GUI ERROR] -- This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.

Available platform plugins are: eglfs, linuxfb, minimal, minimalegl, offscreen, vnc, xcb.


[1]  + IOT instruction  wireshark

#nmap- network mapper
#run nmap --help
#you can run "ping scan"
#you can run a stealth scan
#udp stealth scan-
#saving your file with output-  "-oN/"
Nmap 7.93 ( https://nmap.org )
Usage: nmap [Scan Type(s)] [Options] {target specification}
TARGET SPECIFICATION:
  Can pass hostnames, IP addresses, networks, etc.
  Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254
  -iL <inputfilename>: Input from list of hosts/networks
  -iR <num hosts>: Choose random targets
  --exclude <host1[,host2][,host3],...>: Exclude hosts/networks
  --excludefile <exclude_file>: Exclude list from file
HOST DISCOVERY:
  -sL: List Scan - simply list targets to scan
  -sn: Ping Scan - disable port scan
  -Pn: Treat all hosts as online -- skip host discovery
  -PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports
  -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes
  -PO[protocol list]: IP Protocol Ping
  -n/-R: Never do DNS resolution/Always resolve [default: sometimes]
  --dns-servers <serv1[,serv2],...>: Specify custom DNS servers
  --system-dns: Use OS's DNS resolver
  --traceroute: Trace hop path to each host

SCAN TECHNIQUES:
  -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans
  -sU: UDP Scan
  -sN/sF/sX: TCP Null, FIN, and Xmas scans
  --scanflags <flags>: Customize TCP scan flags
  -sI <zombie host[:probeport]>: Idle scan
  -sY/sZ: SCTP INIT/COOKIE-ECHO scans
  -sO: IP protocol scan
  -b <FTP relay host>: FTP bounce scan
PORT SPECIFICATION AND SCAN ORDER:
  -p <port ranges>: Only scan specified ports
    Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9
  --exclude-ports <port ranges>: Exclude the specified ports from scanning
  -F: Fast mode - Scan fewer ports than the default scan
  -r: Scan ports sequentially - don't randomize
  --top-ports <number>: Scan <number> most common ports
  --port-ratio <ratio>: Scan ports more common than <ratio>
SERVICE/VERSION DETECTION:
  -sV: Probe open ports to determine service/version info
  --version-intensity <level>: Set from 0 (light) to 9 (try all probes)
  --version-light: Limit to most likely probes (intensity 2)

  --scan-delay/--max-scan-delay <time>: Adjust delay between probes
  --min-rate <number>: Send packets no slower than <number> per second
  --max-rate <number>: Send packets no faster than <number> per second
FIREWALL/IDS EVASION AND SPOOFING:
  -f; --mtu <val>: fragment packets (optionally w/given MTU)
  -D <decoy1,decoy2[,ME],...>: Cloak a scan with decoys
  -S <IP_Address>: Spoof source address
  -e <iface>: Use specified interface
  -g/--source-port <portnum>: Use given port number
  --proxies <url1,[url2],...>: Relay connections through HTTP/SOCKS4 proxies
  --data <hex string>: Append a custom payload to sent packets
  --data-string <string>: Append a custom ASCII string to sent packets
  --data-length <num>: Append random data to sent packets
  --ip-options <options>: Send packets with specified ip options
  --ttl <val>: Set IP time-to-live field
  --spoof-mac <mac address/prefix/vendor name>: Spoof your MAC address
  --badsum: Send packets with a bogus TCP/UDP/SCTP checksum
OUTPUT:
  -oN/-oX/-oS/-oG <file>: Output scan in normal, XML, s|<rIpt kIddi3,
     and Grepable format, respectively, to the given filename.
  -oA <basename>: Output in the three major formats at once
  -v: Increase verbosity level (use -vv or more for greater effect)
  -d: Increase debugging level (use -dd or more for greater effect)
  --reason: Display the reason a port is in a particular state

  --open: Only show open (or possibly open) ports
  --packet-trace: Show all packets sent and received
  --iflist: Print host interfaces and routes (for debugging)
  --append-output: Append to rather than clobber specified output files
  --resume <filename>: Resume an aborted scan
  --noninteractive: Disable runtime interactions via keyboard
  --stylesheet <path/URL>: XSL stylesheet to transform XML output to HTML
  --webxml: Reference stylesheet from Nmap.Org for more portable XML
  --no-stylesheet: Prevent associating of XSL stylesheet w/XML output
MISC:
  -6: Enable IPv6 scanning
  -A: Enable OS detection, version detection, script scanning, and traceroute
  --datadir <dirname>: Specify custom Nmap data file location
  --send-eth/--send-ip: Send using raw ethernet frames or IP packets
  --privileged: Assume that the user is fully privileged
  --unprivileged: Assume the user lacks raw socket privileges
  -V: Print version number
  -h: Print this help summary page.
EXAMPLES:
  nmap -v -A scanme.nmap.org
  nmap -v -sn 192.168.0.0/16 10.0.0.0/8
  nmap -v -iR 10000 -Pn -p 80
SEE THE MAN PAGE (https://nmap.org/book/man.html) FOR MORE OPTIONS AND EXAMPLES

#Lets run a ping sweep with nmap
#nmap -sn $ip e.g nmap -sn 192.168.1.0/24
#it shows me everything that is up in my system.
#i can target an ip further- scan an ip by running the below command:
#nmap -T4 192.168.1.0 #T4 is the speed at which you want it to run. you have from 1 - 5
#T1 is the fastest. when you run it, you are likely to miss something. You are likely to be caught too.

#Output
─(root㉿kali)-[~]
└─# nmap -T4 ip   
Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-17 20:39 EDT
Nmap scan report for ip
Host is up (0.0000050s latency).
Not shown: 999 closed tcp ports (reset)
PORT   STATE SERVICE
22/tcp open  ssh

Nmap done: 1 IP address (1 host up) scanned in 0.13 seconds

#you can enter port with a "P" and define our range- or else, it will give the first 1000
#nmap -4 -A -p- ip #A is for all inclusive os version, -p- for all ports.scanning ip
#A will detect trace route, os detection, version

#you can run scanning for only spefic opened ports
#nmap -4 A -p53,80,111,443,514 $ip this is a quicker scanning that running it for all ports

#to output in different formats e.g xml, kiddie etc, run the below command:
#nmap -4 A -p- $ip -oA client

#to scan udp
#nmap -sU -T4 $ip
#you can really trust udp scan because there are a lot of false positives that always come up
#Output
┌──(root㉿kali)-[~]
└─# nmap -sU -T4 $ip
Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-20 00:33 EDT
Nmap scan report for $ip
Host is up (0.000014s latency).
All 1000 scanned ports on $ip are in ignored states.
Not shown: 1000 closed udp ports (port-unreach)

Nmap done: 1 IP address (1 host up) scanned in 0.26 seconds
                                                                             
┌──(root㉿kali)-[~]

#run ls /usr/share/nmap/script
#this is run to see all scripts available to you via nmap
#you can use any of this script to run scrapt for vulnerability
#script to be used for web server assessment
#to check for ciphers. what kind of servers are they running
#to run it for all the scripts in nmap
#nmap -p 443 --script=all -enum ciphers tesla.com
#nmap -p 443 --script=ssl -enum ciphers tesla.com scan tesla for all the ciphers. it rates them
#grade as A or C or B



