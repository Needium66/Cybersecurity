#can host a server through python
#have a python file e.g portscanner.py
#run ifconfig to get ip
#check whether you can access it on a browser
#run this command- python -m SimpleHTTPServer 80( for python2)
#run this for python3 "python3 -m http.server 80"
#You will get something like this on the browser
#Directory listing for /
#ipsweeper.py
#portscanner.py

#check on the browser
#you will get a directory of everything that you are hosting.
#to get a malware for testing, you can use this quickly to test that.
#you can also download an ftp server and enable it to work and transfer files that way
#the python hosting is called pyftpdlib (to host an ftp server on python)
#install pyftpdlib by running this command "pip install pyftpdlib"
#run "python3 -m pyftpdlib -p 21 w"
#to accss the directory of your python host online- go back to the browser and insert "ftp:\" in front of the ip.

#!/bin/python3
#to access command line arguments and others
import sys
#in order to be able to use a port, import this next module (socket)
import socket
from datetime import datetime

#define our target
if len(sys.argv) == 2:
# YOU HAVE GOT TWO ARGUMENTS N THE SAME LINE ACCORDING TO YOUR LOGIC
#one argument has the command and the other has the ip. so get the hostname and change it to ip as output
        target = socket.gethostbyname(sys.argv[1]) #Translate a host name to IPV4
#if it is not 2 arguments, print as invalid
else:
        print("Invalid amount of arguments.")
        print("Syntax: python3.portscanner.py <ip>")
        sys.exit()
#run it to see if it will throw out an error. run python3 shitty_portscanner.py 192
#Output
┌──(root㉿kali)-[~/week3]
└─# python3 shitty_portscanner.py
Invalid amount of arguments.
Syntax: python3.portscanner.py <ip>
                                                                             
┌──(root㉿kali)-[~/week3]
└─# 
#add a pretty banner
print("-" * 50)
print("Scanning target "+target)
print("Time Started: "+str(datetime.now()))
print("-" * 50)

#Output
┌──(root㉿kali)-[~/week3]
└─# python3 shitty_portscanner.py 192
--------------------------------------------------
Scanning target 0.0.0.192
Time Started: 2023-06-10 19:41:04.491915
--------------------------------------------------
                                                                             
┌──(root㉿kali)-[~/week3]
└─# 
#using try and an exception. if there is an exception, throw it an error.
try:
#run a for loo for every ports between 40 and 85 and set up a connection
#define a variable s and timeout default connection
#store the result if it throws an error in the connection
#print a check in port to just check
# if it is success, print the port 
        for port in range(40,85):
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #AF.NET is for IPV4
                socket.setdefaulttimeout(1)
                result = s.connect_ex((target,port)) #returns error indicator
                print("Checking port {}".format(port))
                if result == 0:
                        print("Port () is open".format(port))
                #close the connection
                s.close()

#declare some exceptions
#for keyboard interrupt: ctrl + c
except KeyboardInterrupt:
        print("\nExitingProgram.")
        sys.exit()

#exception for if we cannot connect to the hostname
except socket.gaierror:
        print("Hostname could not be resolved.")
        sys.exit()

#cannot connect to anything e.g server is down
except socket.error:
        print("Couldn't connect to server.")
        sys.exit()
#Outputs.
#it checked all the ports from 40 to 85, no port is opened for me.
#for improvement, add threading for it to multiprocess